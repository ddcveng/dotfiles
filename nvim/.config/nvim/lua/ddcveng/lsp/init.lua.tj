--local inoremap = vim.keymap.inoremap
--local nnoremap = vim.keymap.nnoremap

local Path = require "plenary.path"

local has_lsp, lspconfig = pcall(require, "lspconfig")
local _, lspconfig_util = pcall(require, "lspconfig.util")
if not has_lsp then
  return
end

local nvim_status = require "lsp-status"

-- local telescope_mapper = require "tj.telescope.mappings"
-- local handlers = require "tj.lsp.handlers"

-- Can set this lower if needed.
-- require("vim.lsp.log").set_level "debug"
-- require('vim.lsp.log').set_level("trace")

-- local lspkind = require "lspkind"
local status = require "ddcveng.lsp.status"

-- lspkind.init()
status.activate()

--local nvim_exec = function(txt)
--  vim.api.nvim_exec(txt, false)
--end

local custom_init = function(client)
  client.config.flags = client.config.flags or {}
  client.config.flags.allow_incremental_sync = true
end

--local filetype_attach = setmetatable({
  --go = function(client)
    --vim.cmd [[
      --augroup lsp_buf_format
        --au! BufWritePre <buffer>
        --autocmd BufWritePre <buffer> :lua vim.lsp.buf.formatting_sync()
      --augroup END
    --]]
  --end,
--
  --rust = function()
    --telescope_mapper("<space>wf", "lsp_workspace_symbols", {
      --ignore_filename = true,
      --query = "#",
    --}, true)
--
    --vim.cmd [[
      --autocmd BufEnter,BufWritePost <buffer> :lua require('lsp_extensions.inlay_hints').request {aligned = true, prefix = " Â» "}
    --]]
--
    --vim.cmd [[
      --augroup lsp_buf_format
        --au! BufWritePre <buffer>
        --autocmd BufWritePre <buffer> :lua vim.lsp.buf.formatting(nil, 5000)
      --augroup END
    --]]
  --end,
--}, {
  --__index = function()
    --return function()
    --end
  --end,
--})

local custom_attach = function(client)
  local filetype = vim.api.nvim_buf_get_option(0, "filetype")
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end
  ddcveng.nvim_status.on_attach(client)
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')
  local opts = { noremap = true, silent = true }

  buf_set_keymap('i', '<c-s>', '<Cmd>lua vim.lsp.buf.signature_help()<CR>', opts)

  buf_set_keymap('n', '<space>dn', '<Cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>dp', '<Cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', '<space>dl', '<Cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', '<F2>', '<Cmd>lua vim.lsp.buf.rename()<CR>', opts)
--  telescope_mapper("<space>ca", "lsp_code_actions", nil, true, opts)
  buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gT', '<Cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
--  buf_nnoremap { "<space>gI", handlers.implementation , opts}
--buf_nnoremap { "<space>lr", "<cmd>lua R('tj.lsp.codelens').run()<CR>" , opts}
  buf_set_keymap('n', '<space>rr', 'LspRestart', opts)

  --telescope_mapper("gr", "lsp_references", nil, true)
  --telescope_mapper("gI", "lsp_implementations", nil, true)
  --telescope_mapper("<space>wd", "lsp_document_symbols", { ignore_filename = true }, true)
  --telescope_mapper("<space>ww", "lsp_workspace_symbols", { ignore_filename = true }, true)

  --if filetype ~= "lua" then
   -- buf_nnoremap { "K", vim.lsp.buf.hover }
  --end


  -- Set autocommands conditional on server_capabilities
  if client.resolved_capabilities.document_highlight then
    nvim_exec [[
      augroup lsp_document_highlight
        autocmd! * <buffer>
        autocmd CursorHold <buffer> lua vim.lsp.buf.document_highlight()
        autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()
      augroup END
    ]]
  end

  --if client.resolved_capabilities.code_lens then
    --vim.cmd [[
      --augroup lsp_document_codelens
        --au! * <buffer>
        --autocmd BufWritePost,CursorHold <buffer> lua vim.lsp.codelens.refresh()
      --augroup END
    --]]
  --end

  -- Attach any filetype specific options to the client
  -- filetype_attach[filetype](client)
end

local updated_capabilities = vim.lsp.protocol.make_client_capabilities()
updated_capabilities = vim.tbl_deep_extend("keep", updated_capabilities, nvim_status.capabilities)
updated_capabilities.textDocument.codeLens = { dynamicRegistration = false }
updated_capabilities.textDocument.completion.completionItem.snippetSupport = true
updated_capabilities.textDocument.completion.completionItem.resolveSupport = {
  properties = {
    "documentation",
    "detail",
    "additionalTextEdits",
  },
}

local servers = {
  pyright = false,
  rust_analyzer = false,
  vimls = false,
  yamlls = false,

  cmake = (1 == vim.fn.executable "cmake-language-server"),

  clangd = {
    cmd = {
      "clangd",
      "--background-index",
      "--suggest-missing-includes",
      "--clang-tidy",
      "--header-insertion=iwyu",
    },
    -- Required for lsp-status
    init_options = {
      clangdFileStatus = true,
    },
    handlers = nvim_status.extensions.clangd.setup(),
  },

  omnisharp = {
    cmd = { vim.fn.expand "~/build/omnisharp/OmniSharp.exe", "--languageserver", "--hostPID", tostring(vim.fn.getpid()) },
  },
}

local setup_server = function(server, config)
  if not config then
    return
  end

  if type(config) ~= "table" then
    config = {}
  end

  config = vim.tbl_deep_extend("force", {
    on_init = custom_init,
    on_attach = custom_attach,
    capabilities = updated_capabilities,
    flags = {
      debounce_text_changes = 50,
    },
  }, config)

  lspconfig[server].setup(config)
end

for server, config in pairs(servers) do
  setup_server(server, config)
end

-- Load lua configuration from nlua.
--require("nlua.lsp.nvim").setup(lspconfig, {
  --on_init = custom_init,
  --on_attach = custom_attach,
  --capabilities = updated_capabilities,
--
  --root_dir = function(fname)
    --if string.find(vim.fn.fnamemodify(fname, ":p"), "xdg_config/nvim/") then
      --return vim.fn.expand "~/git/config_manager/xdg_config/nvim/"
    --end
--
    ---- ~/git/config_manager/xdg_config/nvim/...
    --return lspconfig_util.find_git_ancestor(fname) or lspconfig_util.path.dirname(fname)
  --end,
--
  --globals = {
    ---- Colorbuddy
    --"Color",
    --"c",
    --"Group",
    --"g",
    --"s",
--
    ---- Custom
    --"RELOAD",
  --},
--})
--
--require("sg.lsp").setup {
  --on_init = custom_init,
  --on_attach = custom_attach,
--}
--
--[ An example of using functions...
-- 0. nil -> do default (could be enabled or disabled)
-- 1. false -> disable it
-- 2. true -> enable, use defaults
-- 3. table -> enable, with (some) overrides
-- 4. function -> can return any of above
--
-- vim.lsp.handlers["textDocument/publishDiagnostics"] = function(err, method, params, client_id, bufnr, config)
--   local uri = params.uri
--
--   vim.lsp.with(
--     vim.lsp.diagnostic.on_publish_diagnostics, {
--       underline = true,
--       virtual_text = true,
--       signs = sign_decider,
--       update_in_insert = false,
--     }
--   )(err, method, params, client_id, bufnr, config)
--
--   bufnr = bufnr or vim.uri_to_bufnr(uri)
--
--   if bufnr == vim.api.nvim_get_current_buf() then
--     vim.lsp.diagnostic.set_loclist { open_loclist = false }
--   end
-- end
--]]

-- python graveyard
-- lspconfig.pyls.setup {
--   plugins = {
--     pyls_mypy = {
--       enabled = true,
--       live_mode = false
--     }
--   },
--   on_init = custom_init,
--   on_attach = custom_attach,
--   capabilities = updated_capabilities,
-- }

-- lspconfig.jedi_language_server.setup {
--   on_init = custom_init,
--   on_attach = custom_attach,
--   capabilities = updated_capabilities,
-- }

return {
  on_attach = custom_attach,
  capabilities = updated_capabilities,
}
